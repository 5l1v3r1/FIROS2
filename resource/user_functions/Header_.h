// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Header_.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _Header__H_
#define _Header__H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Header__SOURCE)
#define Header__DllAPI __declspec( dllexport )
#else
#define Header__DllAPI __declspec( dllimport )
#endif // Header__SOURCE
#else
#define Header__DllAPI
#endif
#else
#define Header__DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace std_msgs
{
    namespace msg
    {
        namespace dds_
        {
            /*!
             * @brief This class represents the structure Header_ defined by the user in the IDL file.
             * @ingroup HEADER_
             */
            class Header_
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Header_();
                
                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Header_();
                
                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object std_msgs::msg::dds_::Header_ that will be copied.
                 */
                eProsima_user_DllExport Header_(const Header_ &x);
                
                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object std_msgs::msg::dds_::Header_ that will be copied.
                 */
                eProsima_user_DllExport Header_(Header_ &&x);
                
                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object std_msgs::msg::dds_::Header_ that will be copied.
                 */
                eProsima_user_DllExport Header_& operator=(const Header_ &x);
                
                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object std_msgs::msg::dds_::Header_ that will be copied.
                 */
                eProsima_user_DllExport Header_& operator=(Header_ &&x);
                
                /*!
                 * @brief This function sets a value in member sec
                 * @param _sec New value for member sec
                 */
                inline eProsima_user_DllExport void sec(int32_t _sec)
                {
                    m_sec = _sec;
                }

                /*!
                 * @brief This function returns the value of member sec
                 * @return Value of member sec
                 */
                inline eProsima_user_DllExport int32_t sec() const
                {
                    return m_sec;
                }

                /*!
                 * @brief This function returns a reference to member sec
                 * @return Reference to member sec
                 */
                inline eProsima_user_DllExport int32_t& sec()
                {
                    return m_sec;
                }
                /*!
                 * @brief This function sets a value in member nanosec
                 * @param _nanosec New value for member nanosec
                 */
                inline eProsima_user_DllExport void nanosec(uint32_t _nanosec)
                {
                    m_nanosec = _nanosec;
                }

                /*!
                 * @brief This function returns the value of member nanosec
                 * @return Value of member nanosec
                 */
                inline eProsima_user_DllExport uint32_t nanosec() const
                {
                    return m_nanosec;
                }

                /*!
                 * @brief This function returns a reference to member nanosec
                 * @return Reference to member nanosec
                 */
                inline eProsima_user_DllExport uint32_t& nanosec()
                {
                    return m_nanosec;
                }
                /*!
                 * @brief This function copies the value in member frame_id_
                 * @param _frame_id_ New value to be copied in member frame_id_
                 */
                inline eProsima_user_DllExport void frame_id_(const std::string &_frame_id_)
                {
                    m_frame_id_ = _frame_id_;
                }

                /*!
                 * @brief This function moves the value in member frame_id_
                 * @param _frame_id_ New value to be moved in member frame_id_
                 */
                inline eProsima_user_DllExport void frame_id_(std::string &&_frame_id_)
                {
                    m_frame_id_ = std::move(_frame_id_);
                }

                /*!
                 * @brief This function returns a constant reference to member frame_id_
                 * @return Constant reference to member frame_id_
                 */
                inline eProsima_user_DllExport const std::string& frame_id_() const
                {
                    return m_frame_id_;
                }

                /*!
                 * @brief This function returns a reference to member frame_id_
                 * @return Reference to member frame_id_
                 */
                inline eProsima_user_DllExport std::string& frame_id_()
                {
                    return m_frame_id_;
                }
                
                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const std_msgs::msg::dds_::Header_& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
                
            private:
                int32_t m_sec;
                uint32_t m_nanosec;
                std::string m_frame_id_;
            };
        }
    }
}

#endif // _Header__H_