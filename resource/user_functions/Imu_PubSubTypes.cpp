// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Imu_PubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "Imu_PubSubTypes.h"

namespace sensor_msgs
{
    namespace msg
    {
        namespace dds_
        {

            Imu_PubSubType::Imu_PubSubType() {
            	setName("sensor_msgs::msg::dds_::Imu_");
            	m_typeSize = (uint32_t)Imu_::getMaxCdrSerializedSize();
            	m_isGetKeyDefined = Imu_::isKeyDefined();
            	m_keyBuffer = (unsigned char*)malloc(Imu_::getKeyMaxCdrSerializedSize()>16 ? Imu_::getKeyMaxCdrSerializedSize() : 16);
            }

            Imu_PubSubType::~Imu_PubSubType() {
            	if(m_keyBuffer!=nullptr)
            		free(m_keyBuffer);
            }

            bool Imu_PubSubType::serialize(void *data, SerializedPayload_t *payload) {
            	Imu_ *p_type = (Imu_*) data;
            	eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
            	eprosima::fastcdr::Cdr ser(fastbuffer); 	// Object that serializes the data.
                payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
            	p_type->serialize(ser); 	// Serialize the object:
                payload->length = (uint32_t)ser.getSerializedDataLength(); 	//Get the serialized length
            	return true;
            }

            bool Imu_PubSubType::deserialize(SerializedPayload_t* payload, void* data) {
            	Imu_* p_type = (Imu_*) data; 	//Convert DATA to pointer of your type
            	eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); 	// Object that manages the raw buffer.
            	eprosima::fastcdr::Cdr deser(fastbuffer, payload->encapsulation == CDR_BE ? eprosima::fastcdr::Cdr::BIG_ENDIANNESS : eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS); 	// Object that deserializes the data.
            	p_type->deserialize(deser);	//Deserialize the object:
            	return true;
            }

            std::function<uint32_t()> Imu_PubSubType::getSerializedSizeProvider(void* data) {
                return [data]() -> uint32_t { return (uint32_t)type::getCdrSerializedSize(*static_cast<Imu_*>(data)); };
            }

            void* Imu_PubSubType::createData() {
            	return (void*)new Imu_();
            }

            void Imu_PubSubType::deleteData(void* data) {
            	delete((Imu_*)data);
            }

            bool Imu_PubSubType::getKey(void *data, InstanceHandle_t* handle) {
            	if(!m_isGetKeyDefined)
            		return false;
            	Imu_* p_type = (Imu_*) data;
            	eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,Imu_::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
            	eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
            	p_type->serializeKey(ser);
            	if(Imu_::getKeyMaxCdrSerializedSize()>16)	{
            		m_md5.init();
            		m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
            		m_md5.finalize();
            		for(uint8_t i = 0;i<16;++i)    	{
                    	handle->value[i] = m_md5.digest[i];
                	}
                }
                else    {
                	for(uint8_t i = 0;i<16;++i)    	{
                    	handle->value[i] = m_keyBuffer[i];
                	}
                }
            	return true;
            }


        } //End of namespace dds_

    } //End of namespace msg

} //End of namespace sensor_msgs
