// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Imu_.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _Imu__H_
#define _Imu__H_

// TODO Poner en el contexto.
#include "Quaternion_.h"
#include "Header_.h"
#include "Vector3_.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(Imu__SOURCE)
#define Imu__DllAPI __declspec( dllexport )
#else
#define Imu__DllAPI __declspec( dllimport )
#endif // Imu__SOURCE
#else
#define Imu__DllAPI
#endif
#else
#define Imu__DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace sensor_msgs
{
    namespace msg
    {
        namespace dds_
        {
            typedef std::array<double, 9> sensor_msgs__Imu__double_array_9;
            /*!
             * @brief This class represents the structure Imu_ defined by the user in the IDL file.
             * @ingroup IMU_
             */
            class Imu_
            {
            public:

                /*!
                 * @brief Default constructor.
                 */
                eProsima_user_DllExport Imu_();
                
                /*!
                 * @brief Default destructor.
                 */
                eProsima_user_DllExport ~Imu_();
                
                /*!
                 * @brief Copy constructor.
                 * @param x Reference to the object sensor_msgs::msg::dds_::Imu_ that will be copied.
                 */
                eProsima_user_DllExport Imu_(const Imu_ &x);
                
                /*!
                 * @brief Move constructor.
                 * @param x Reference to the object sensor_msgs::msg::dds_::Imu_ that will be copied.
                 */
                eProsima_user_DllExport Imu_(Imu_ &&x);
                
                /*!
                 * @brief Copy assignment.
                 * @param x Reference to the object sensor_msgs::msg::dds_::Imu_ that will be copied.
                 */
                eProsima_user_DllExport Imu_& operator=(const Imu_ &x);
                
                /*!
                 * @brief Move assignment.
                 * @param x Reference to the object sensor_msgs::msg::dds_::Imu_ that will be copied.
                 */
                eProsima_user_DllExport Imu_& operator=(Imu_ &&x);
                
                /*!
                 * @brief This function copies the value in member header_
                 * @param _header_ New value to be copied in member header_
                 */
                inline eProsima_user_DllExport void header_(const std_msgs::msg::dds_::Header_ &_header_)
                {
                    m_header_ = _header_;
                }

                /*!
                 * @brief This function moves the value in member header_
                 * @param _header_ New value to be moved in member header_
                 */
                inline eProsima_user_DllExport void header_(std_msgs::msg::dds_::Header_ &&_header_)
                {
                    m_header_ = std::move(_header_);
                }

                /*!
                 * @brief This function returns a constant reference to member header_
                 * @return Constant reference to member header_
                 */
                inline eProsima_user_DllExport const std_msgs::msg::dds_::Header_& header_() const
                {
                    return m_header_;
                }

                /*!
                 * @brief This function returns a reference to member header_
                 * @return Reference to member header_
                 */
                inline eProsima_user_DllExport std_msgs::msg::dds_::Header_& header_()
                {
                    return m_header_;
                }
                /*!
                 * @brief This function copies the value in member orientation_
                 * @param _orientation_ New value to be copied in member orientation_
                 */
                inline eProsima_user_DllExport void orientation_(const geometry_msgs::msg::dds_::Quaternion_ &_orientation_)
                {
                    m_orientation_ = _orientation_;
                }

                /*!
                 * @brief This function moves the value in member orientation_
                 * @param _orientation_ New value to be moved in member orientation_
                 */
                inline eProsima_user_DllExport void orientation_(geometry_msgs::msg::dds_::Quaternion_ &&_orientation_)
                {
                    m_orientation_ = std::move(_orientation_);
                }

                /*!
                 * @brief This function returns a constant reference to member orientation_
                 * @return Constant reference to member orientation_
                 */
                inline eProsima_user_DllExport const geometry_msgs::msg::dds_::Quaternion_& orientation_() const
                {
                    return m_orientation_;
                }

                /*!
                 * @brief This function returns a reference to member orientation_
                 * @return Reference to member orientation_
                 */
                inline eProsima_user_DllExport geometry_msgs::msg::dds_::Quaternion_& orientation_()
                {
                    return m_orientation_;
                }
                /*!
                 * @brief This function copies the value in member orientation_covariance_
                 * @param _orientation_covariance_ New value to be copied in member orientation_covariance_
                 */
                inline eProsima_user_DllExport void orientation_covariance_(const sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9 &_orientation_covariance_)
                {
                    m_orientation_covariance_ = _orientation_covariance_;
                }

                /*!
                 * @brief This function moves the value in member orientation_covariance_
                 * @param _orientation_covariance_ New value to be moved in member orientation_covariance_
                 */
                inline eProsima_user_DllExport void orientation_covariance_(sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9 &&_orientation_covariance_)
                {
                    m_orientation_covariance_ = std::move(_orientation_covariance_);
                }

                /*!
                 * @brief This function returns a constant reference to member orientation_covariance_
                 * @return Constant reference to member orientation_covariance_
                 */
                inline eProsima_user_DllExport const sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9& orientation_covariance_() const
                {
                    return m_orientation_covariance_;
                }

                /*!
                 * @brief This function returns a reference to member orientation_covariance_
                 * @return Reference to member orientation_covariance_
                 */
                inline eProsima_user_DllExport sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9& orientation_covariance_()
                {
                    return m_orientation_covariance_;
                }
                /*!
                 * @brief This function copies the value in member angular_velocity_
                 * @param _angular_velocity_ New value to be copied in member angular_velocity_
                 */
                inline eProsima_user_DllExport void angular_velocity_(const geometry_msgs::msg::dds_::Vector3_ &_angular_velocity_)
                {
                    m_angular_velocity_ = _angular_velocity_;
                }

                /*!
                 * @brief This function moves the value in member angular_velocity_
                 * @param _angular_velocity_ New value to be moved in member angular_velocity_
                 */
                inline eProsima_user_DllExport void angular_velocity_(geometry_msgs::msg::dds_::Vector3_ &&_angular_velocity_)
                {
                    m_angular_velocity_ = std::move(_angular_velocity_);
                }

                /*!
                 * @brief This function returns a constant reference to member angular_velocity_
                 * @return Constant reference to member angular_velocity_
                 */
                inline eProsima_user_DllExport const geometry_msgs::msg::dds_::Vector3_& angular_velocity_() const
                {
                    return m_angular_velocity_;
                }

                /*!
                 * @brief This function returns a reference to member angular_velocity_
                 * @return Reference to member angular_velocity_
                 */
                inline eProsima_user_DllExport geometry_msgs::msg::dds_::Vector3_& angular_velocity_()
                {
                    return m_angular_velocity_;
                }
                /*!
                 * @brief This function copies the value in member angular_velocity_covariance_
                 * @param _angular_velocity_covariance_ New value to be copied in member angular_velocity_covariance_
                 */
                inline eProsima_user_DllExport void angular_velocity_covariance_(const sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9 &_angular_velocity_covariance_)
                {
                    m_angular_velocity_covariance_ = _angular_velocity_covariance_;
                }

                /*!
                 * @brief This function moves the value in member angular_velocity_covariance_
                 * @param _angular_velocity_covariance_ New value to be moved in member angular_velocity_covariance_
                 */
                inline eProsima_user_DllExport void angular_velocity_covariance_(sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9 &&_angular_velocity_covariance_)
                {
                    m_angular_velocity_covariance_ = std::move(_angular_velocity_covariance_);
                }

                /*!
                 * @brief This function returns a constant reference to member angular_velocity_covariance_
                 * @return Constant reference to member angular_velocity_covariance_
                 */
                inline eProsima_user_DllExport const sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9& angular_velocity_covariance_() const
                {
                    return m_angular_velocity_covariance_;
                }

                /*!
                 * @brief This function returns a reference to member angular_velocity_covariance_
                 * @return Reference to member angular_velocity_covariance_
                 */
                inline eProsima_user_DllExport sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9& angular_velocity_covariance_()
                {
                    return m_angular_velocity_covariance_;
                }
                /*!
                 * @brief This function copies the value in member linear_acceleration_
                 * @param _linear_acceleration_ New value to be copied in member linear_acceleration_
                 */
                inline eProsima_user_DllExport void linear_acceleration_(const geometry_msgs::msg::dds_::Vector3_ &_linear_acceleration_)
                {
                    m_linear_acceleration_ = _linear_acceleration_;
                }

                /*!
                 * @brief This function moves the value in member linear_acceleration_
                 * @param _linear_acceleration_ New value to be moved in member linear_acceleration_
                 */
                inline eProsima_user_DllExport void linear_acceleration_(geometry_msgs::msg::dds_::Vector3_ &&_linear_acceleration_)
                {
                    m_linear_acceleration_ = std::move(_linear_acceleration_);
                }

                /*!
                 * @brief This function returns a constant reference to member linear_acceleration_
                 * @return Constant reference to member linear_acceleration_
                 */
                inline eProsima_user_DllExport const geometry_msgs::msg::dds_::Vector3_& linear_acceleration_() const
                {
                    return m_linear_acceleration_;
                }

                /*!
                 * @brief This function returns a reference to member linear_acceleration_
                 * @return Reference to member linear_acceleration_
                 */
                inline eProsima_user_DllExport geometry_msgs::msg::dds_::Vector3_& linear_acceleration_()
                {
                    return m_linear_acceleration_;
                }
                /*!
                 * @brief This function copies the value in member linear_acceleration_covariance_
                 * @param _linear_acceleration_covariance_ New value to be copied in member linear_acceleration_covariance_
                 */
                inline eProsima_user_DllExport void linear_acceleration_covariance_(const sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9 &_linear_acceleration_covariance_)
                {
                    m_linear_acceleration_covariance_ = _linear_acceleration_covariance_;
                }

                /*!
                 * @brief This function moves the value in member linear_acceleration_covariance_
                 * @param _linear_acceleration_covariance_ New value to be moved in member linear_acceleration_covariance_
                 */
                inline eProsima_user_DllExport void linear_acceleration_covariance_(sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9 &&_linear_acceleration_covariance_)
                {
                    m_linear_acceleration_covariance_ = std::move(_linear_acceleration_covariance_);
                }

                /*!
                 * @brief This function returns a constant reference to member linear_acceleration_covariance_
                 * @return Constant reference to member linear_acceleration_covariance_
                 */
                inline eProsima_user_DllExport const sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9& linear_acceleration_covariance_() const
                {
                    return m_linear_acceleration_covariance_;
                }

                /*!
                 * @brief This function returns a reference to member linear_acceleration_covariance_
                 * @return Reference to member linear_acceleration_covariance_
                 */
                inline eProsima_user_DllExport sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9& linear_acceleration_covariance_()
                {
                    return m_linear_acceleration_covariance_;
                }
                
                /*!
                 * @brief This function returns the maximum serialized size of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function returns the serialized size of a data depending on the buffer alignment.
                 * @param data Data which is calculated its serialized size.
                 * @param current_alignment Buffer alignment.
                 * @return Serialized size.
                 */
                eProsima_user_DllExport static size_t getCdrSerializedSize(const sensor_msgs::msg::dds_::Imu_& data, size_t current_alignment = 0);


                /*!
                 * @brief This function serializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                /*!
                 * @brief This function deserializes an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                /*!
                 * @brief This function returns the maximum serialized size of the Key of an object
                 * depending on the buffer alignment.
                 * @param current_alignment Buffer alignment.
                 * @return Maximum serialized size.
                 */
                eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                /*!
                 * @brief This function tells you if the Key has been defined for this type
                 */
                eProsima_user_DllExport static bool isKeyDefined();

                /*!
                 * @brief This function serializes the key members of an object using CDR serialization.
                 * @param cdr CDR serialization object.
                 */
                eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
                
            private:
                std_msgs::msg::dds_::Header_ m_header_;
                geometry_msgs::msg::dds_::Quaternion_ m_orientation_;
                sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9 m_orientation_covariance_;
                geometry_msgs::msg::dds_::Vector3_ m_angular_velocity_;
                sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9 m_angular_velocity_covariance_;
                geometry_msgs::msg::dds_::Vector3_ m_linear_acceleration_;
                sensor_msgs::msg::dds_::sensor_msgs__Imu__double_array_9 m_linear_acceleration_covariance_;
            };
        }
    }
}

#endif // _Imu__H_