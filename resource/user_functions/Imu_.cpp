// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file Imu_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Imu_.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


sensor_msgs::msg::dds_::Imu_::Imu_()
{







}

sensor_msgs::msg::dds_::Imu_::~Imu_()
{
}

sensor_msgs::msg::dds_::Imu_::Imu_(const Imu_ &x)
{
    m_header_ = x.m_header_;
    m_orientation_ = x.m_orientation_;
    m_orientation_covariance_ = x.m_orientation_covariance_;
    m_angular_velocity_ = x.m_angular_velocity_;
    m_angular_velocity_covariance_ = x.m_angular_velocity_covariance_;
    m_linear_acceleration_ = x.m_linear_acceleration_;
    m_linear_acceleration_covariance_ = x.m_linear_acceleration_covariance_;
}

sensor_msgs::msg::dds_::Imu_::Imu_(Imu_ &&x)
{
    m_header_ = std::move(x.m_header_);
    m_orientation_ = std::move(x.m_orientation_);
    m_orientation_covariance_ = std::move(x.m_orientation_covariance_);
    m_angular_velocity_ = std::move(x.m_angular_velocity_);
    m_angular_velocity_covariance_ = std::move(x.m_angular_velocity_covariance_);
    m_linear_acceleration_ = std::move(x.m_linear_acceleration_);
    m_linear_acceleration_covariance_ = std::move(x.m_linear_acceleration_covariance_);
}

sensor_msgs::msg::dds_::Imu_& sensor_msgs::msg::dds_::Imu_::operator=(const Imu_ &x)
{
    m_header_ = x.m_header_;
    m_orientation_ = x.m_orientation_;
    m_orientation_covariance_ = x.m_orientation_covariance_;
    m_angular_velocity_ = x.m_angular_velocity_;
    m_angular_velocity_covariance_ = x.m_angular_velocity_covariance_;
    m_linear_acceleration_ = x.m_linear_acceleration_;
    m_linear_acceleration_covariance_ = x.m_linear_acceleration_covariance_;
    
    return *this;
}

sensor_msgs::msg::dds_::Imu_& sensor_msgs::msg::dds_::Imu_::operator=(Imu_ &&x)
{
    m_header_ = std::move(x.m_header_);
    m_orientation_ = std::move(x.m_orientation_);
    m_orientation_covariance_ = std::move(x.m_orientation_covariance_);
    m_angular_velocity_ = std::move(x.m_angular_velocity_);
    m_angular_velocity_covariance_ = std::move(x.m_angular_velocity_covariance_);
    m_linear_acceleration_ = std::move(x.m_linear_acceleration_);
    m_linear_acceleration_covariance_ = std::move(x.m_linear_acceleration_covariance_);
    
    return *this;
}

size_t sensor_msgs::msg::dds_::Imu_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += std_msgs::msg::dds_::Header_::getMaxCdrSerializedSize(current_alignment);
    current_alignment += geometry_msgs::msg::dds_::Quaternion_::getMaxCdrSerializedSize(current_alignment);
    current_alignment += ((9) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += geometry_msgs::msg::dds_::Vector3_::getMaxCdrSerializedSize(current_alignment);
    current_alignment += ((9) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += geometry_msgs::msg::dds_::Vector3_::getMaxCdrSerializedSize(current_alignment);
    current_alignment += ((9) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

size_t sensor_msgs::msg::dds_::Imu_::getCdrSerializedSize(const sensor_msgs::msg::dds_::Imu_& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += std_msgs::msg::dds_::Header_::getCdrSerializedSize(data.header_(), current_alignment);
    current_alignment += geometry_msgs::msg::dds_::Quaternion_::getCdrSerializedSize(data.orientation_(), current_alignment);
    current_alignment += ((9) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    current_alignment += geometry_msgs::msg::dds_::Vector3_::getCdrSerializedSize(data.angular_velocity_(), current_alignment);
    current_alignment += ((9) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    current_alignment += geometry_msgs::msg::dds_::Vector3_::getCdrSerializedSize(data.linear_acceleration_(), current_alignment);
    current_alignment += ((9) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    return current_alignment - initial_alignment;
}

void sensor_msgs::msg::dds_::Imu_::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_header_;

    scdr << m_orientation_;

    scdr << m_orientation_covariance_;

    scdr << m_angular_velocity_;

    scdr << m_angular_velocity_covariance_;

    scdr << m_linear_acceleration_;

    scdr << m_linear_acceleration_covariance_;

}

void sensor_msgs::msg::dds_::Imu_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_header_;
    dcdr >> m_orientation_;
    dcdr >> m_orientation_covariance_;
    dcdr >> m_angular_velocity_;
    dcdr >> m_angular_velocity_covariance_;
    dcdr >> m_linear_acceleration_;
    dcdr >> m_linear_acceleration_covariance_;
}

size_t sensor_msgs::msg::dds_::Imu_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            








    return current_align;
}

bool sensor_msgs::msg::dds_::Imu_::isKeyDefined()
{
    return false;
}

void sensor_msgs::msg::dds_::Imu_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
	 
	 
	 
	 
	 
}


