// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file RobotRcvTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "RobotRcv.h"
#include "RobotRcvTypeObject.h"
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registerRobotRcvTypes()
{
    TypeObjectFactory *factory = TypeObjectFactory::GetInstance();
    factory->AddTypeObject("RobotPosition", GetRobotPositionIdentifier(true), GetRobotPositionObject(true));
    factory->AddTypeObject("RobotPosition", GetRobotPositionIdentifier(false), GetRobotPositionObject(false));
    factory->AddTypeObject("State", GetStateIdentifier(true), GetStateObject(true));
    factory->AddTypeObject("State", GetStateIdentifier(false), GetStateObject(false));
    factory->AddTypeObject("RobotRcv", GetRobotRcvIdentifier(true), GetRobotRcvObject(true));
    factory->AddTypeObject("RobotRcv", GetRobotRcvIdentifier(false), GetRobotRcvObject(false));
}

const TypeIdentifier* GetStateIdentifier(bool complete)
{
    const TypeIdentifier* c_identifier = TypeObjectFactory::GetInstance()->GetTypeIdentifier("State", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetStateObject(complete); // Generated inside
    return TypeObjectFactory::GetInstance()->GetTypeIdentifier("State", complete);
}

const TypeObject* GetStateObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::GetInstance()->GetTypeObject("State", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteStateObject();
    }
    // else
    return GetMinimalStateObject();
}

const TypeObject* GetMinimalStateObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::GetInstance()->GetTypeObject("State", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_ENUM);
    // Unused
    //type_object->minimal().enumerated_type().enum_flags().IS_FINAL(false);
    //type_object->minimal().enumerated_type().enum_flags().IS_APPENDABLE(false);
    //type_object->minimal().enumerated_type().enum_flags().IS_MUTABLE(false);
    //type_object->minimal().enumerated_type().enum_flags().IS_NESTED(false);
    //type_object->minimal().enumerated_type().enum_flags().IS_AUTOID_HASH(false);

    type_object->minimal().enumerated_type().header().common().bit_bound(32); // TODO fixed by IDL, isn't?

    uint32_t value = 0;
    MinimalEnumeratedLiteral mel_ACTION;
    mel_ACTION.common().flags().TRY_CONSTRUCT1(false);
    mel_ACTION.common().flags().TRY_CONSTRUCT2(false);
    mel_ACTION.common().flags().IS_EXTERNAL(false);
    mel_ACTION.common().flags().IS_OPTIONAL(false);
    mel_ACTION.common().flags().IS_MUST_UNDERSTAND(false);
    mel_ACTION.common().flags().IS_KEY(false);
    mel_ACTION.common().flags().IS_DEFAULT(false);
    mel_ACTION.common().flags().IS_DEFAULT(false);
    mel_ACTION.common().value(value++);
    MD5 ACTION_hash("ACTION");
    for(int i = 0; i < 4; ++i)
    {
        mel_ACTION.detail().name_hash()[i] = ACTION_hash.digest[i];
    }
    type_object->minimal().enumerated_type().literal_seq().emplace_back(mel_ACTION);

    MinimalEnumeratedLiteral mel_STAND_BY;
    mel_STAND_BY.common().flags().TRY_CONSTRUCT1(false);
    mel_STAND_BY.common().flags().TRY_CONSTRUCT2(false);
    mel_STAND_BY.common().flags().IS_EXTERNAL(false);
    mel_STAND_BY.common().flags().IS_OPTIONAL(false);
    mel_STAND_BY.common().flags().IS_MUST_UNDERSTAND(false);
    mel_STAND_BY.common().flags().IS_KEY(false);
    mel_STAND_BY.common().flags().IS_DEFAULT(false);
    mel_STAND_BY.common().flags().IS_DEFAULT(false);
    mel_STAND_BY.common().value(value++);
    MD5 STAND_BY_hash("STAND_BY");
    for(int i = 0; i < 4; ++i)
    {
        mel_STAND_BY.detail().name_hash()[i] = STAND_BY_hash.digest[i];
    }
    type_object->minimal().enumerated_type().literal_seq().emplace_back(mel_STAND_BY);


    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalEnumeratedType::getCdrSerializedSize(type_object->minimal().enumerated_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::GetInstance()->AddTypeObject("State", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::GetInstance()->GetTypeObject("State", false);
}

const TypeObject* GetCompleteStateObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::GetInstance()->GetTypeObject("State", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_ENUM);

    type_object->complete().enumerated_type().enum_flags().IS_FINAL(false);
    type_object->complete().enumerated_type().enum_flags().IS_APPENDABLE(false);
    type_object->complete().enumerated_type().enum_flags().IS_MUTABLE(false);
    type_object->complete().enumerated_type().enum_flags().IS_NESTED(false);
    type_object->complete().enumerated_type().enum_flags().IS_AUTOID_HASH(false);

    type_object->complete().enumerated_type().header().common().bit_bound(32); // TODO fixed by IDL, isn't?
    //type_object->complete().enumerated_type().header().detail().ann_builtin()...
    //type_object->complete().enumerated_type().header().detail().ann_custom()...
    type_object->complete().enumerated_type().header().detail().type_name("State");

    uint32_t value = 0;
    CompleteEnumeratedLiteral cel_ACTION;
    cel_ACTION.common().flags().TRY_CONSTRUCT1(false);
    cel_ACTION.common().flags().TRY_CONSTRUCT2(false);
    cel_ACTION.common().flags().IS_EXTERNAL(false);
    cel_ACTION.common().flags().IS_OPTIONAL(false);
    cel_ACTION.common().flags().IS_MUST_UNDERSTAND(false);
    cel_ACTION.common().flags().IS_KEY(false);
    cel_ACTION.common().flags().IS_DEFAULT(false);
    cel_ACTION.common().flags().IS_DEFAULT(false);
    cel_ACTION.common().value(value++);
    cel_ACTION.detail().name("ACTION");
    //cel_ACTION.detail().ann_builtin()...
    //cel_ACTION.detail().ann_custom()...
    type_object->complete().enumerated_type().literal_seq().emplace_back(cel_ACTION);

    CompleteEnumeratedLiteral cel_STAND_BY;
    cel_STAND_BY.common().flags().TRY_CONSTRUCT1(false);
    cel_STAND_BY.common().flags().TRY_CONSTRUCT2(false);
    cel_STAND_BY.common().flags().IS_EXTERNAL(false);
    cel_STAND_BY.common().flags().IS_OPTIONAL(false);
    cel_STAND_BY.common().flags().IS_MUST_UNDERSTAND(false);
    cel_STAND_BY.common().flags().IS_KEY(false);
    cel_STAND_BY.common().flags().IS_DEFAULT(false);
    cel_STAND_BY.common().flags().IS_DEFAULT(false);
    cel_STAND_BY.common().value(value++);
    cel_STAND_BY.detail().name("STAND_BY");
    //cel_STAND_BY.detail().ann_builtin()...
    //cel_STAND_BY.detail().ann_custom()...
    type_object->complete().enumerated_type().literal_seq().emplace_back(cel_STAND_BY);


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteEnumeratedType::getCdrSerializedSize(type_object->complete().enumerated_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::GetInstance()->AddTypeObject("State", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::GetInstance()->GetTypeObject("State", true);
}

const TypeIdentifier* GetRobotRcvIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::GetInstance()->GetTypeIdentifier("RobotRcv", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetRobotRcvObject(complete); // Generated inside
    return TypeObjectFactory::GetInstance()->GetTypeIdentifier("RobotRcv", complete);
}

const TypeObject* GetRobotRcvObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::GetInstance()->GetTypeObject("RobotRcv", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteRobotRcvObject();
    }
    //else
    return GetMinimalRobotRcvObject();
}

const TypeObject* GetMinimalRobotRcvObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::GetInstance()->GetTypeObject("RobotRcv", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false);

    MemberId memberId = 0;
    MinimalStructMember mst_robot_id;
    mst_robot_id.common().member_id(memberId++);
    mst_robot_id.common().member_flags().TRY_CONSTRUCT1(false);
    mst_robot_id.common().member_flags().TRY_CONSTRUCT2(false);
    mst_robot_id.common().member_flags().IS_EXTERNAL(false);
    mst_robot_id.common().member_flags().IS_OPTIONAL(false);
    mst_robot_id.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_robot_id.common().member_flags().IS_KEY(false);
    mst_robot_id.common().member_flags().IS_DEFAULT(false);
    mst_robot_id.common().member_type_id(*TypeObjectFactory::GetInstance()->GetStringIdentifier(255, false));


    MD5 robot_id_hash("robot_id");
    for(int i = 0; i < 4; ++i)
    {
        mst_robot_id.detail().name_hash()[i] = robot_id_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_robot_id);

    MinimalStructMember mst_transmission_time;
    mst_transmission_time.common().member_id(memberId++);
    mst_transmission_time.common().member_flags().TRY_CONSTRUCT1(false);
    mst_transmission_time.common().member_flags().TRY_CONSTRUCT2(false);
    mst_transmission_time.common().member_flags().IS_EXTERNAL(false);
    mst_transmission_time.common().member_flags().IS_OPTIONAL(false);
    mst_transmission_time.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_transmission_time.common().member_flags().IS_KEY(false);
    mst_transmission_time.common().member_flags().IS_DEFAULT(false);
    mst_transmission_time.common().member_type_id(*TypeObjectFactory::GetInstance()->GetStringIdentifier(255, false));


    MD5 transmission_time_hash("transmission_time");
    for(int i = 0; i < 4; ++i)
    {
        mst_transmission_time.detail().name_hash()[i] = transmission_time_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_transmission_time);

    MinimalStructMember mst_destination;
    mst_destination.common().member_id(memberId++);
    mst_destination.common().member_flags().TRY_CONSTRUCT1(false);
    mst_destination.common().member_flags().TRY_CONSTRUCT2(false);
    mst_destination.common().member_flags().IS_EXTERNAL(false);
    mst_destination.common().member_flags().IS_OPTIONAL(false);
    mst_destination.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_destination.common().member_flags().IS_KEY(false);
    mst_destination.common().member_flags().IS_DEFAULT(false);
    mst_destination.common().member_type_id(*GetRobotPositionIdentifier(false));
    MD5 destination_hash("destination");
    for(int i = 0; i < 4; ++i)
    {
        mst_destination.detail().name_hash()[i] = destination_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_destination);

    MinimalStructMember mst_state;
    mst_state.common().member_id(memberId++);
    mst_state.common().member_flags().TRY_CONSTRUCT1(false);
    mst_state.common().member_flags().TRY_CONSTRUCT2(false);
    mst_state.common().member_flags().IS_EXTERNAL(false);
    mst_state.common().member_flags().IS_OPTIONAL(false);
    mst_state.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_state.common().member_flags().IS_KEY(false);
    mst_state.common().member_flags().IS_DEFAULT(false);
    mst_state.common().member_type_id(*GetStateIdentifier(false));
    MD5 state_hash("state");
    for(int i = 0; i < 4; ++i)
    {
        mst_state.detail().name_hash()[i] = state_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_state);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::GetInstance()->AddTypeObject("RobotRcv", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::GetInstance()->GetTypeObject("RobotRcv", false);
}

const TypeObject* GetCompleteRobotRcvObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::GetInstance()->GetTypeObject("RobotRcv", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false);

    MemberId memberId = 0;
    CompleteStructMember cst_robot_id;
    cst_robot_id.common().member_id(memberId++);
    cst_robot_id.common().member_flags().TRY_CONSTRUCT1(false);
    cst_robot_id.common().member_flags().TRY_CONSTRUCT2(false);
    cst_robot_id.common().member_flags().IS_EXTERNAL(false);
    cst_robot_id.common().member_flags().IS_OPTIONAL(false);
    cst_robot_id.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_robot_id.common().member_flags().IS_KEY(false);
    cst_robot_id.common().member_flags().IS_DEFAULT(false);
    cst_robot_id.common().member_type_id(*TypeObjectFactory::GetInstance()->GetStringIdentifier(255, false));


    cst_robot_id.detail().name("robot_id");
    //cst_robot_id.detail().ann_builtin()...
    //cst_robot_id.detail().ann_custom()...
    type_object->complete().struct_type().member_seq().emplace_back(cst_robot_id);

    CompleteStructMember cst_transmission_time;
    cst_transmission_time.common().member_id(memberId++);
    cst_transmission_time.common().member_flags().TRY_CONSTRUCT1(false);
    cst_transmission_time.common().member_flags().TRY_CONSTRUCT2(false);
    cst_transmission_time.common().member_flags().IS_EXTERNAL(false);
    cst_transmission_time.common().member_flags().IS_OPTIONAL(false);
    cst_transmission_time.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_transmission_time.common().member_flags().IS_KEY(false);
    cst_transmission_time.common().member_flags().IS_DEFAULT(false);
    cst_transmission_time.common().member_type_id(*TypeObjectFactory::GetInstance()->GetStringIdentifier(255, false));


    cst_transmission_time.detail().name("transmission_time");
    //cst_transmission_time.detail().ann_builtin()...
    //cst_transmission_time.detail().ann_custom()...
    type_object->complete().struct_type().member_seq().emplace_back(cst_transmission_time);

    CompleteStructMember cst_destination;
    cst_destination.common().member_id(memberId++);
    cst_destination.common().member_flags().TRY_CONSTRUCT1(false);
    cst_destination.common().member_flags().TRY_CONSTRUCT2(false);
    cst_destination.common().member_flags().IS_EXTERNAL(false);
    cst_destination.common().member_flags().IS_OPTIONAL(false);
    cst_destination.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_destination.common().member_flags().IS_KEY(false);
    cst_destination.common().member_flags().IS_DEFAULT(false);
    cst_destination.common().member_type_id(*GetRobotPositionIdentifier(true));
    cst_destination.detail().name("destination");
    //cst_destination.detail().ann_builtin()...
    //cst_destination.detail().ann_custom()...
    type_object->complete().struct_type().member_seq().emplace_back(cst_destination);

    CompleteStructMember cst_state;
    cst_state.common().member_id(memberId++);
    cst_state.common().member_flags().TRY_CONSTRUCT1(false);
    cst_state.common().member_flags().TRY_CONSTRUCT2(false);
    cst_state.common().member_flags().IS_EXTERNAL(false);
    cst_state.common().member_flags().IS_OPTIONAL(false);
    cst_state.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_state.common().member_flags().IS_KEY(false);
    cst_state.common().member_flags().IS_DEFAULT(false);
    cst_state.common().member_type_id(*GetStateIdentifier(true));
    cst_state.detail().name("state");
    //cst_state.detail().ann_builtin()...
    //cst_state.detail().ann_custom()...
    type_object->complete().struct_type().member_seq().emplace_back(cst_state);


    // Header
    type_object->complete().struct_type().header().detail().type_name("RobotRcv");
    //type_object->complete().struct_type().header().detail().ann_builtin()...
    //type_object->complete().struct_type().header().detail().ann_custom()...
    // TODO inheritance
    //type_object->complete().struct_type().header().base_type()._d(EK_COMPLETE);
    //type_object->complete().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::GetInstance()->AddTypeObject("RobotRcv", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::GetInstance()->GetTypeObject("RobotRcv", true);
}
