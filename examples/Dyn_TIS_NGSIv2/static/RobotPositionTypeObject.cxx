// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file RobotPositionTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "RobotPosition.h"
#include "RobotPositionTypeObject.h"
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registerRobotPositionTypes()
{
    TypeObjectFactory *factory = TypeObjectFactory::GetInstance();
    factory->AddTypeObject("RobotPosition", GetRobotPositionIdentifier(true), GetRobotPositionObject(true));
    factory->AddTypeObject("RobotPosition", GetRobotPositionIdentifier(false), GetRobotPositionObject(false));
}

const TypeIdentifier* GetRobotPositionIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::GetInstance()->GetTypeIdentifier("RobotPosition", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetRobotPositionObject(complete); // Generated inside
    return TypeObjectFactory::GetInstance()->GetTypeIdentifier("RobotPosition", complete);
}

const TypeObject* GetRobotPositionObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::GetInstance()->GetTypeObject("RobotPosition", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteRobotPositionObject();
    }
    //else
    return GetMinimalRobotPositionObject();
}

const TypeObject* GetMinimalRobotPositionObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::GetInstance()->GetTypeObject("RobotPosition", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false);

    MemberId memberId = 0;
    MinimalStructMember mst_floor;
    mst_floor.common().member_id(memberId++);
    mst_floor.common().member_flags().TRY_CONSTRUCT1(false);
    mst_floor.common().member_flags().TRY_CONSTRUCT2(false);
    mst_floor.common().member_flags().IS_EXTERNAL(false);
    mst_floor.common().member_flags().IS_OPTIONAL(false);
    mst_floor.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_floor.common().member_flags().IS_KEY(false);
    mst_floor.common().member_flags().IS_DEFAULT(false);
    {
        std::string cppType = "uint32_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_floor.common().member_type_id(*TypeObjectFactory::GetInstance()->GetTypeIdentifier(cppType, false));
    }

    MD5 floor_hash("floor");
    for(int i = 0; i < 4; ++i)
    {
        mst_floor.detail().name_hash()[i] = floor_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_floor);

    MinimalStructMember mst_x;
    mst_x.common().member_id(memberId++);
    mst_x.common().member_flags().TRY_CONSTRUCT1(false);
    mst_x.common().member_flags().TRY_CONSTRUCT2(false);
    mst_x.common().member_flags().IS_EXTERNAL(false);
    mst_x.common().member_flags().IS_OPTIONAL(false);
    mst_x.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_x.common().member_flags().IS_KEY(false);
    mst_x.common().member_flags().IS_DEFAULT(false);
    {
        std::string cppType = "uint32_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_x.common().member_type_id(*TypeObjectFactory::GetInstance()->GetTypeIdentifier(cppType, false));
    }

    MD5 x_hash("x");
    for(int i = 0; i < 4; ++i)
    {
        mst_x.detail().name_hash()[i] = x_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_x);

    MinimalStructMember mst_y;
    mst_y.common().member_id(memberId++);
    mst_y.common().member_flags().TRY_CONSTRUCT1(false);
    mst_y.common().member_flags().TRY_CONSTRUCT2(false);
    mst_y.common().member_flags().IS_EXTERNAL(false);
    mst_y.common().member_flags().IS_OPTIONAL(false);
    mst_y.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_y.common().member_flags().IS_KEY(false);
    mst_y.common().member_flags().IS_DEFAULT(false);
    {
        std::string cppType = "uint32_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_y.common().member_type_id(*TypeObjectFactory::GetInstance()->GetTypeIdentifier(cppType, false));
    }

    MD5 y_hash("y");
    for(int i = 0; i < 4; ++i)
    {
        mst_y.detail().name_hash()[i] = y_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_y);

    MinimalStructMember mst_zeta;
    mst_zeta.common().member_id(memberId++);
    mst_zeta.common().member_flags().TRY_CONSTRUCT1(false);
    mst_zeta.common().member_flags().TRY_CONSTRUCT2(false);
    mst_zeta.common().member_flags().IS_EXTERNAL(false);
    mst_zeta.common().member_flags().IS_OPTIONAL(false);
    mst_zeta.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_zeta.common().member_flags().IS_KEY(false);
    mst_zeta.common().member_flags().IS_DEFAULT(false);
    {
        std::string cppType = "uint32_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_zeta.common().member_type_id(*TypeObjectFactory::GetInstance()->GetTypeIdentifier(cppType, false));
    }

    MD5 zeta_hash("zeta");
    for(int i = 0; i < 4; ++i)
    {
        mst_zeta.detail().name_hash()[i] = zeta_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_zeta);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::GetInstance()->AddTypeObject("RobotPosition", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::GetInstance()->GetTypeObject("RobotPosition", false);
}

const TypeObject* GetCompleteRobotPositionObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::GetInstance()->GetTypeObject("RobotPosition", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false);

    MemberId memberId = 0;
    CompleteStructMember cst_floor;
    cst_floor.common().member_id(memberId++);
    cst_floor.common().member_flags().TRY_CONSTRUCT1(false);
    cst_floor.common().member_flags().TRY_CONSTRUCT2(false);
    cst_floor.common().member_flags().IS_EXTERNAL(false);
    cst_floor.common().member_flags().IS_OPTIONAL(false);
    cst_floor.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_floor.common().member_flags().IS_KEY(false);
    cst_floor.common().member_flags().IS_DEFAULT(false);
    {
        std::string cppType = "uint32_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_floor.common().member_type_id(*TypeObjectFactory::GetInstance()->GetTypeIdentifier(cppType, false));
    }

    cst_floor.detail().name("floor");
    //cst_floor.detail().ann_builtin()...
    //cst_floor.detail().ann_custom()...
    type_object->complete().struct_type().member_seq().emplace_back(cst_floor);

    CompleteStructMember cst_x;
    cst_x.common().member_id(memberId++);
    cst_x.common().member_flags().TRY_CONSTRUCT1(false);
    cst_x.common().member_flags().TRY_CONSTRUCT2(false);
    cst_x.common().member_flags().IS_EXTERNAL(false);
    cst_x.common().member_flags().IS_OPTIONAL(false);
    cst_x.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_x.common().member_flags().IS_KEY(false);
    cst_x.common().member_flags().IS_DEFAULT(false);
    {
        std::string cppType = "uint32_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_x.common().member_type_id(*TypeObjectFactory::GetInstance()->GetTypeIdentifier(cppType, false));
    }

    cst_x.detail().name("x");
    //cst_x.detail().ann_builtin()...
    //cst_x.detail().ann_custom()...
    type_object->complete().struct_type().member_seq().emplace_back(cst_x);

    CompleteStructMember cst_y;
    cst_y.common().member_id(memberId++);
    cst_y.common().member_flags().TRY_CONSTRUCT1(false);
    cst_y.common().member_flags().TRY_CONSTRUCT2(false);
    cst_y.common().member_flags().IS_EXTERNAL(false);
    cst_y.common().member_flags().IS_OPTIONAL(false);
    cst_y.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_y.common().member_flags().IS_KEY(false);
    cst_y.common().member_flags().IS_DEFAULT(false);
    {
        std::string cppType = "uint32_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_y.common().member_type_id(*TypeObjectFactory::GetInstance()->GetTypeIdentifier(cppType, false));
    }

    cst_y.detail().name("y");
    //cst_y.detail().ann_builtin()...
    //cst_y.detail().ann_custom()...
    type_object->complete().struct_type().member_seq().emplace_back(cst_y);

    CompleteStructMember cst_zeta;
    cst_zeta.common().member_id(memberId++);
    cst_zeta.common().member_flags().TRY_CONSTRUCT1(false);
    cst_zeta.common().member_flags().TRY_CONSTRUCT2(false);
    cst_zeta.common().member_flags().IS_EXTERNAL(false);
    cst_zeta.common().member_flags().IS_OPTIONAL(false);
    cst_zeta.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_zeta.common().member_flags().IS_KEY(false);
    cst_zeta.common().member_flags().IS_DEFAULT(false);
    {
        std::string cppType = "uint32_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_zeta.common().member_type_id(*TypeObjectFactory::GetInstance()->GetTypeIdentifier(cppType, false));
    }

    cst_zeta.detail().name("zeta");
    //cst_zeta.detail().ann_builtin()...
    //cst_zeta.detail().ann_custom()...
    type_object->complete().struct_type().member_seq().emplace_back(cst_zeta);


    // Header
    type_object->complete().struct_type().header().detail().type_name("RobotPosition");
    //type_object->complete().struct_type().header().detail().ann_builtin()...
    //type_object->complete().struct_type().header().detail().ann_custom()...
    // TODO inheritance
    //type_object->complete().struct_type().header().base_type()._d(EK_COMPLETE);
    //type_object->complete().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::GetInstance()->AddTypeObject("RobotPosition", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::GetInstance()->GetTypeObject("RobotPosition", true);
}
